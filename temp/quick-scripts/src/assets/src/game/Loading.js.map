{"version":3,"sources":["assets/src/game/Loading.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qDAAgD;AAChD,oEAA+D;AAC/D,sDAAiD;AACjD,kDAA6C;AAC7C,0CAAqC;AACrC,mDAA8C;AAC9C,yDAAoD;AAEpD,EAAE,CAAC,KAAK,CAAC,mBAAmB,GAAG,KAAK,CAAC;AACrC,EAAE,CAAC,mBAAmB,CAAC,OAAO,GAAG,IAAI,CAAC;AAChC,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAqC,2BAAY;IAAjD;QAAA,qEA4CC;QAzCC,gBAAU,GAAmB,IAAI,CAAC;;IAyCpC,CAAC;IAvCC,wBAAM,GAAN;QAAA,iBAkBC;QAjBC,oBAAU,CAAC,UAAU,EAAE,CAAC;QACxB,gBAAM,CAAC,IAAI,EAAE,CAAC;QACd,uBAAa,CAAC,IAAI,EAAE,CAAC;QACrB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnC,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,CAAC,CAAC;QAC7B,IAAI,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC;QAClC,EAAE,CAAC,MAAM,CAAC,UAAU,GAAG,UAAU,KAAK,EAAE,MAAM;YAC5C,IAAI,IAAI,CAAC,UAAU;gBAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,KAAK,GAAG,MAAM,CAAC;QACjE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAKb,IAAI,QAAQ,GAAG,gBAAM,CAAC,QAAQ,CAAC;QAC/B,uBAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,iBAAO,CAAC,MAAM,CAAC,UAAC,GAAG;YAC5D,KAAI,CAAC,eAAe,EAAE,CAAC;QACzB,CAAC,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED,uBAAK,GAAL;QACE,iBAAO,CAAC,aAAa,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACtC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAEO,0BAAQ,GAAhB;QACE,0BAA0B;QAC1B,IAAI,CAAC,eAAe,EAAE,CAAA;IACxB,CAAC;IAED,iCAAe,GAAf;QACE,qBAAW,CAAC,QAAQ,EAAE,CAAC;QACvB,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC9B,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM,EAAC,UAAC,KAAK,EAAC,KAAK;QAE5C,CAAC,CAAC,CAAA;QACF,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IACnD,CAAC;IAxCD;QADC,QAAQ,CAAC,EAAE,CAAC,WAAW,CAAC;+CACS;IAHf,OAAO;QAD3B,OAAO;OACa,OAAO,CA4C3B;IAAD,cAAC;CA5CD,AA4CC,CA5CoC,EAAE,CAAC,SAAS,GA4ChD;kBA5CoB,OAAO","file":"","sourceRoot":"/","sourcesContent":["import Handler from \"../framework/base/Handler\";\nimport LoaderManager from \"../framework/manager/LoaderManager\";\nimport MKUtils from \"../framework/tools/MkUtils\";\nimport LoaderType from \"./consts/LoaderType\";\nimport UIType from \"./consts/UIType\";\nimport PlayerModel from \"./datas/PlayerModel\";\nimport ConfigManager from \"./manager/ConfigManager\";\n\ncc.macro.CLEANUP_IMAGE_CACHE = false;\ncc.dynamicAtlasManager.enabled = true;\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Loading extends cc.Component {\n\n  @property(cc.ProgressBar)\n  loadingBar: cc.ProgressBar = null;\n\n  onLoad() {\n    LoaderType.initConfig();\n    UIType.init();\n    ConfigManager.init();\n    this.loadingBar.node.active = true;\n    this.loadingBar.progress = 0;\n    let backup = cc.loader.onProgress;\n    cc.loader.onProgress = function (count, amount) {\n      if (this.loadingBar) this.loadingBar.progress = count / amount;\n    }.bind(this);\n\n\n\n\n    let gameView = UIType.gameView;\n    LoaderManager.loaderPrefab(gameView.uname, Handler.create((res) => {\n      this.initDataSuccess();\n    }, this), gameView.mname);\n  }\n\n  start() {\n    MKUtils.setStatsColor(cc.Color.WHITE);\n    cc.game.setFrameRate(60);\n    this.initData();\n  }\n\n  private initData() {\n    // PlayerModel.loadData();\n    this.initDataSuccess()\n  }\n\n  initDataSuccess() {\n    PlayerModel.loadData();\n    cc.director.loadScene(\"main\");\n    cc.director.preloadScene(\"main\",(count,total)=>{\n\n    })\n    console.log(\"查看分辨率\", JSON.stringify(cc.winSize));\n  }\n}\n"]}