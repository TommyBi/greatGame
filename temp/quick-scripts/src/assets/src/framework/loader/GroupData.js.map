{"version":3,"sources":["assets/src/framework/loader/GroupData.ts"],"names":[],"mappings":";;;;;;AAAA,2CAAsC;AAOtC;IAAA;QACW,cAAS,GAAwB,IAAI,CAAC;QACtC,aAAQ,GAAG,IAAI,CAAC,CAAM,QAAQ;QAC9B,YAAO,GAAG,IAAI,CAAC,CAAO,MAAM;QAC3B,kBAAa,GAAG,IAAI,CAAC,CAAC,eAAe;QACrC,cAAS,GAAc,EAAE,CAAC,CAAO,MAAM;QACvC,gBAAW,GAAU,CAAC,CAAC,CAAM,SAAS;IA2ClD,CAAC;IAzCG,uCAAmB,GAAnB;QACI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG,iBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,EAAC,IAAI,EAAC,KAAK,CAAC,CAAC;QACzE,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAED,uCAAmB,GAAnB,UAAoB,GAAG,EAAC,GAAG;QACvB,mBAAmB;QACnB,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC;QACjC,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;YAC3C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAClC,IAAI,CAAC,KAAK,EAAE,CAAC;SAChB;QACD,8BAA8B;IAClC,CAAC;IAED,sCAAkB,GAAlB,UAAmB,GAAG,EAAC,GAAG;QACtB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACxD,IAAM,OAAO,GAAiB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACpD,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE;gBAC9C,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAC5B,IAAI,CAAC,WAAW,EAAE,CAAC;gBACnB,MAAM;aACT;SACJ;IACL,CAAC;IAED,yBAAK,GAAL;QACI,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAG,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;SAC1B;QACD,IAAG,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE;YACrB,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;SAChC;QACD,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC9B,CAAC;IACL,gBAAC;AAAD,CAjDA,AAiDC,IAAA","file":"","sourceRoot":"/","sourcesContent":["import Handler from \"../base/Handler\";\r\nexport interface GroupFileData {\r\n    fileName:string,\r\n    type:string,\r\n    moduleName:string\r\n}\r\n\r\nexport default class GroupData {\r\n    public resources:Array<GroupFileData> = null;\r\n    public isActive = true;      //默认可以使用\r\n    public handler = null;       //回调函数\r\n    private loaderHandler = null; //单个资源加载完成的回调函数\r\n    private resultArr:Array<any> = [];       //返回结果\r\n    private loaderCount:number = 0;      //加载完成的数量\r\n\r\n    getCompletetHandler(){\r\n        this.resultArr.length = 0;\r\n        this.loaderCount = 0;\r\n        this.loaderHandler = Handler.create(this._signLoaderComplete,this,false);\r\n        return this.loaderHandler;\r\n    }\r\n\r\n    _signLoaderComplete(res,url){\r\n        // cc.log(res,url);\r\n        this._putToResultByName(res,url);\r\n        if (this.loaderCount >= this.resources.length) {\r\n            this.handler.call(this.resultArr);\r\n            this.reset();\r\n        }\r\n        //比对是否全部加载完成 如果全部完成回调 同时重置data\r\n    }\r\n\r\n    _putToResultByName(res,url){\r\n        for (let index = 0; index < this.resources.length; index++) {\r\n            const element:GroupFileData = this.resources[index];\r\n            if (!!url && url.indexOf(element.fileName) != -1) {\r\n                this.resultArr[index] = res;\r\n                this.loaderCount++;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    reset(){\r\n        this.isActive = false;\r\n        this.resources = null;\r\n        if(!!this.handler) {\r\n            this.handler.release();\r\n        }\r\n        if(!!this.loaderHandler) {\r\n            this.loaderHandler.release();\r\n        }\r\n        this.resultArr.length = 0;\r\n        this.loaderCount = 0;\r\n        this.loaderHandler = null;\r\n    }\r\n}\r\n\r\n\r\n"]}