{"version":3,"sources":["assets/src/framework/message/NResponer.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Utils from \"../tools/Utils\";\r\nimport Handler from \"../base/Handler\";\r\nexport interface NResponserData {\r\n    type: number | string,\r\n    handler: Handler\r\n    isOnce: boolean,\r\n}\r\nclass NResponser {\r\n    private allHandlers = new Map();\r\n\r\n    private static _instance: NResponser;\r\n\r\n    public static instance(): NResponser {\r\n        if (!this._instance) {\r\n            this._instance = new NResponser();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    /**\r\n     * 派发事件\r\n     * @param type 类型\r\n     * @param args 参数\r\n     */\r\n    dispatch(type: number | string, ...args) {\r\n        this.allHandlers.forEach((value, key) => {\r\n            let targetEvents: Array<NResponserData> = value;//this.allHandlers.get(value);\r\n            if (!!targetEvents) {\r\n                for (let i = 0; i < targetEvents.length; i++) {\r\n                    if (targetEvents[i].type === type) {\r\n                        targetEvents[i].handler.call(args);\r\n                        this.checkOnceEvent(targetEvents, i);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    /**\r\n     * 添加事件监听\r\n     * @param type 事件类型\r\n     * @param handler 回调函数\r\n     * @param target 监听绑定对象\r\n     * @param isOnce 是否只侦听一次\r\n     */\r\n    on(type: number | string, handler: Handler, target: any, isOnce: boolean = false) {\r\n        // on(type: number | string, callBack: Function, target: any, isOnce: boolean = false) {\r\n        if (!!target) {\r\n            if (!this.allHandlers.has(target)) {\r\n                this.allHandlers.set(target, []);\r\n            }\r\n            let arr = this.allHandlers.get(target);\r\n            arr.push({ type: type, handler: handler, isOnce: isOnce });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否target在侦听某个事件\r\n     * @param type \r\n     * @param target \r\n     */\r\n    has(type: number | string, target: any) {\r\n        if (!!target) {\r\n            if (this.allHandlers.has(target)) {\r\n                let arr = this.allHandlers.get(target);\r\n                for (let index = 0; index < arr.length; index++) {\r\n                    const element = arr[index];\r\n                    if (element.type === type) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 移除侦听\r\n     * @param type \r\n     * @param handler \r\n     * @param target \r\n     * @param isRelease \r\n     */\r\n    off(type: number | string, handler: Handler, target: any, isRelease: boolean = false) {\r\n        if (!!target) {\r\n            let targetEvents: Array<NResponserData> = this.allHandlers.get(target);\r\n            if (!!targetEvents) {\r\n                for (let i = 0; i < targetEvents.length; i++) {\r\n                    if (targetEvents[i].type === type && targetEvents[i].handler.equal(handler)) {\r\n                        if (isRelease) {\r\n                            targetEvents[i].handler.release();\r\n                        }\r\n                        Utils.arrayRemove(targetEvents, i, 1);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除目标身上全部侦听\r\n     * @param target \r\n     * @param isRelease \r\n     */\r\n    targetOff(target: any, isRelease: boolean) {\r\n        if (!!target) {\r\n            if (this.allHandlers.has(target)) {\r\n                if (!!isRelease) {\r\n                    let arr = this.allHandlers.get(target);\r\n                    if (!!arr) {\r\n                        for (let index = 0; index < arr.length; index++) {\r\n                            arr[index].handler.release();\r\n                        }\r\n                    }\r\n                }\r\n                this.allHandlers.delete(target);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 检查一次性事件\r\n     * @param arr \r\n     * @param index \r\n     */\r\n    private checkOnceEvent(arr, index) {\r\n        let data = arr[index];\r\n        if (data.isOnce) {\r\n            Utils.arrayRemove(arr, index);\r\n        }\r\n    }\r\n};\r\nexport default NResponser.instance();"]}