{"version":3,"sources":["assets/src/framework/manager/MusicManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Global from \"../../game/consts/Global\";\r\nimport PlayerModel from \"../../game/datas/PlayerModel\";\r\nimport Handler from \"../base/Handler\";\r\nimport StorageHelper from \"../helper/StorageHelper\";\r\n\r\nclass MusicManager\r\n{\r\n    private _musicVolume : number = 1;\r\n    private _switchEffect : boolean =  true;//是否开启音效\r\n    private _switchMusic : boolean = true;//是否开启背景音效\r\n    private _playEffect  = {};\r\n    private cacheClips = {};\r\n    private _lastEffect: string = '';//上一次播放的音效\r\n    private _lastMusic: string = '';//上次播放的音乐\r\n\r\n    private static _instance:MusicManager;\r\n    \r\n    private preURL:string = 'sound/';//音效路径的前缀\r\n\r\n    public static instance():MusicManager\r\n    {\r\n        if (!this._instance) {\r\n            this._instance = new MusicManager();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n\r\n    /**\r\n     * 播放音效文件\r\n     * url: 音效文件相对地址\r\n     * loop: 是否循环播放\r\n     * isSign: 每次只能播放一次 如果同时播放多个时 则后边的会全部不播放\r\n     * isStopPre\r\n     */\r\n\r\n    /**\r\n     * 播放音效文件\r\n     * @param url 音效文件相对地址\r\n     * @param loop 是否循环播放\r\n     * @param isSign 每次只能播放一次 如果同时播放多个时 则后边的会全部不播放\r\n     * @param isStopPre 播放同一个音效时 是否停止上一个音效\r\n     * @param handler  播放完成的回调函数\r\n     * @returns \r\n     */\r\n    playEffect(url:string,loop:boolean=false,isSign:boolean=false,isStopPre:boolean=false,handler:Handler=null)\r\n    {\r\n        if(this._switchEffect)\r\n        {\r\n            if (isSign) {\r\n                if (this._lastEffect == url) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if ( isStopPre ) {\r\n                this.stopEffect(url);\r\n            }\r\n            this._lastEffect = url;\r\n            url = this.preURL + url;\r\n            let clip = this._getClip(url);\r\n            let effectId = -1;\r\n            if (!!clip) {\r\n                effectId = cc.audioEngine.playEffect(clip, loop);\r\n                if ( !loop && handler) {\r\n                    cc.audioEngine.setFinishCallback( effectId,(id)=>{\r\n                        handler.call();\r\n                    } );\r\n                }\r\n                this._playEffect[url] = effectId;\r\n            } else {\r\n                cc.loader.loadRes(url, cc.AudioClip, (err, clip) =>{\r\n                    effectId = cc.audioEngine.playEffect(clip, loop);\r\n                    if ( !loop && handler ) {\r\n                        cc.audioEngine.setFinishCallback( effectId,(id)=>{\r\n                            handler.call();\r\n                        } );\r\n                    }\r\n                    this.cacheClips[url] = clip;\r\n                    this._playEffect[url] = effectId;\r\n                });\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    clearLastEffect(){\r\n        this._lastEffect = null;\r\n    }\r\n\r\n    stopEffectByID(id:number)\r\n    {\r\n        cc.audioEngine.stopEffect(id);\r\n    }\r\n\r\n    stopEffect(url)\r\n    {\r\n        let effectId = this._playEffect[this.preURL + url];\r\n        delete this._playEffect[this.preURL + url];\r\n        cc.audioEngine.stopEffect(effectId);\r\n    }\r\n\r\n    /**\r\n     * 背景音乐播放\r\n     * url: 资源路径\r\n     * loop: 是否循环\r\n     */\r\n    playMusic (url:string, loop:boolean=false){\r\n        if(this._switchMusic){\r\n            if (this._lastMusic === url) {\r\n                return;\r\n            }\r\n            this._lastMusic = url;\r\n            url = this.preURL + url;\r\n            let clip = this._getClip(url);\r\n            if (!!clip) {\r\n                cc.audioEngine.playMusic(clip, loop);    \r\n            } else {\r\n                cc.loader.loadRes(url, cc.AudioClip, (err, clip) =>{\r\n                    cc.audioEngine.playMusic(clip, loop);\r\n                    this.cacheClips[url] = clip;\r\n                });\r\n            }\r\n            \r\n        }\r\n    }\r\n    getLastMusic(){\r\n        if(this._lastMusic == ''){\r\n            return null;\r\n        }else{\r\n            return this._lastMusic;\r\n        }\r\n    }\r\n\r\n        /**\r\n     * 暂停当前播放音乐\r\n     */\r\n    setPauseMusic()\r\n    {\r\n        cc.audioEngine.pauseMusic();\r\n    }\r\n\r\n    /**\r\n     * 恢复当前被暂停音乐音乐\r\n     */\r\n    setResumeMusic()\r\n    {\r\n        cc.audioEngine.resumeMusic();\r\n    }\r\n\r\n    /**\r\n     * 重新播放该背景音乐\r\n     */\r\n    replayMusic()\r\n    {\r\n        cc.audioEngine.resumeMusic();\r\n    }\r\n\r\n    /**\r\n     * 停止播放音乐\r\n     * releaseData： 控制是否释放音乐资源 true释放资源 | false不释放资源\r\n     */\r\n    setStopMusic(releaseData = true)\r\n    {\r\n        cc.audioEngine.stopMusic();\r\n    }\r\n\r\n    setMusicVolume(value)\r\n    {\r\n        this._musicVolume = value;\r\n        cc.audioEngine.setMusicVolume(value);\r\n    }\r\n\r\n    getMusicVolume()\r\n    {\r\n        return cc.audioEngine.getMusicVolume();\r\n    }\r\n\r\n    setEffectSwitch(value)\r\n    {\r\n        this._switchEffect = value;\r\n        StorageHelper.saveValueByKey('audio',value);\r\n    }\r\n\r\n    setMusicSwitch(value){\r\n        this._switchMusic = value;\r\n        if (!value) {\r\n            this.setPauseMusic();\r\n        } else {\r\n            this.setResumeMusic();\r\n        }\r\n        StorageHelper.saveValueByKey('music',value);\r\n    }\r\n\r\n    getEffectSwitch()\r\n    {\r\n        // let statusStr = StorageHelper.getValueByKey('audio');\r\n        // let status = true;\r\n        // if (statusStr != null) {\r\n        //     if(typeof statusStr != \"boolean\")\r\n        //     {\r\n        //         if(statusStr === 'false') {\r\n        //             status = false;\r\n        //         } else {\r\n        //             status = true;\r\n        //         }\r\n        //     } else {\r\n        //         status = statusStr;\r\n        //     }\r\n        // } else {\r\n        //     status = true;\r\n        // }\r\n        \r\n        // return status;\r\n        return PlayerModel.getSoundYinXiaoSwitch() == Global.SOUND_YINXIAO_SWITCH_OPEN;\r\n    }\r\n\r\n    getMusicSwitch()\r\n    {\r\n        // let statusStr = StorageHelper.getValueByKey('music');\r\n        // let status = true;\r\n        // if (statusStr != null) {\r\n        //     if(typeof statusStr != \"boolean\")\r\n        //     {\r\n        //         if(statusStr === 'false') {\r\n        //             status = false;\r\n        //         } else {\r\n        //             status = true;\r\n        //         }\r\n        //     } else {\r\n        //         status = statusStr;\r\n        //     }\r\n        // } else {\r\n        //     status = true;\r\n        // }\r\n        // return status;\r\n        return PlayerModel.getSoundSwitch() == Global.SOUND_SWITCH_OPEN;\r\n    }\r\n\r\n    initMusic()\r\n    {\r\n        this._switchEffect = this.getEffectSwitch();\r\n        this._switchMusic = this.getMusicSwitch();\r\n    }\r\n\r\n    /** \r\n     * 音乐是否正在播放（验证些方法来实现背景音乐是否播放完成）\r\n     * return boolen\r\n     */\r\n    isMusicPlaying()\r\n    {\r\n        return cc.audioEngine.isMusicPlaying();\r\n    }\r\n\r\n    /**\r\n     * 释放指定音效资源\r\n     * @param url 地址\r\n     * @param isEffect 是否是音效 \r\n     */\r\n    releaseAudio(url:string,isEffect:boolean=false){\r\n        let clip = this._getClip(this.preURL + url);\r\n        if( clip ){\r\n            if ( isEffect ) {\r\n                this.stopEffect(url);\r\n            } else {\r\n                this.setStopMusic();\r\n            }\r\n            delete this.cacheClips[url];\r\n            cc.audioEngine.uncache(clip);\r\n        }else{\r\n            cc.error(\"【音频】资源\" + url + \"不存在,释放失败\");\r\n        }\r\n    }\r\n\r\n    releaseAllAudio()\r\n    {\r\n        cc.audioEngine.uncacheAll();\r\n    }\r\n\r\n    _getClip(name){\r\n        if (this.cacheClips.hasOwnProperty(name)) {\r\n            return this.cacheClips[name];\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default MusicManager.instance();"]}