{"version":3,"sources":["assets/src/framework/manager/LoaderManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Handler from \"../base/Handler\";\r\nimport GroupLoader from \"../loader/GroupLoader\";\r\nimport { GroupFileData } from \"../loader/GroupData\";\r\nimport Loader from \"../loader/Loader\";\r\nimport ComponentHelper from \"../tools/ComponentHelper\";\r\nimport UIMananger from \"./UIMananger\";\r\nimport UIType from \"../../game/consts/UIType\";\r\nimport { UIEffectType } from \"./UIEffectManager\";\r\n\r\n/**\r\n * 资源加载模块数据\r\n */\r\nexport interface moduleData {\r\n    mname:string,//模块名称\r\n    url:string, //模块对应的路径\r\n    isRelease:boolean //释放可以释放\r\n}\r\n\r\nclass LoaderManager\r\n{\r\n    //模块配置数据,由外部传入\r\n    private moudleConfigs = <moduleData>{};\r\n    //loader 模块加载器\r\n    private moudleLoaders = <Loader>{};\r\n    private groupLoader:GroupLoader = null;\r\n\r\n    private static _instance:LoaderManager;\r\n    \r\n    public static instance():LoaderManager\r\n    {\r\n        if (!this._instance) {\r\n            this._instance = new LoaderManager();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param fileName 文件名\r\n     * @param type 文件类型\r\n     * @param handler 回调函数\r\n     * @param mname 模块名\r\n     */\r\n    loadRes(fileName:string,type:any,handler:Handler,mname:string){\r\n        let info:moduleData = this.checkModuleConfig(mname);\r\n        if(!!info) {\r\n            if (!this.moudleLoaders[mname]){\r\n                this.moudleLoaders[mname] = new Loader(info.isRelease);\r\n            }\r\n            let url = info.url + '/' + fileName;\r\n            this.moudleLoaders[mname].addLoaderItem(url,type,handler);\r\n        } else {\r\n            cc.error('module no exist: ' + mname);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置模块数据 外部调用\r\n     * @param data 模块数据\r\n     */\r\n    setModuleConfig(data:moduleData)\r\n    {\r\n        if (!!data) {\r\n            if (!this.moudleConfigs.hasOwnProperty(data.mname))\r\n            {\r\n                this.moudleConfigs[data.mname] = data;\r\n            }\r\n        } else {\r\n            cc.error('module config error');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载sprite\r\n     * @param fileName \r\n     * @param handler \r\n     * @param mname \r\n     */\r\n    loaderSpriteFrame(fileName:string,handler:Handler,mname:string){\r\n        this.loadRes(fileName,cc.SpriteFrame,handler,mname);\r\n    }\r\n\r\n    /**\r\n     * 加载Prefab\r\n     * @param fileName \r\n     * @param handler \r\n     * @param mname \r\n     */\r\n    loaderPrefab(fileName:string,handler:Handler,mname:string)\r\n    {\r\n        this.loadRes(fileName,cc.Prefab,handler,mname);\r\n    }\r\n\r\n    /**\r\n     * 加载json\r\n     * @param fileName \r\n     * @param handler \r\n     * @param mname \r\n     */\r\n    loaderJson(fileName:string,handler:Handler,mname:string) {\r\n        this.loadRes(fileName,cc.JsonAsset,handler,mname);\r\n    }\r\n\r\n    /**\r\n     * 加载spine\r\n     * @param fileName \r\n     * @param handler \r\n     * @param mname \r\n     */\r\n    loaderSpine(fileName:string,handler:Handler,mname:string) {\r\n        this.loadRes(fileName,sp.SkeletonData,handler,mname);\r\n    }\r\n\r\n    /**\r\n     * 加载动画\r\n     * @param fileName \r\n     * @param handler \r\n     * @param mname \r\n     */\r\n    loaderAniamteClip(fileName:string,handler:Handler,mname:string)\r\n    {\r\n        this.loadRes(fileName,cc.AnimationClip,handler,mname)\r\n    }\r\n\r\n    /**\r\n     * 加载sprite并赋值\r\n     * @param node sprite节点\r\n     * @param fileName 文件名\r\n     * @param mname 模块名\r\n     */\r\n    load2Sprite(node:cc.Node,fileName:string,mname:string)\r\n    {\r\n        this.loadRes(fileName,cc.SpriteFrame,Handler.create((res)=>{\r\n            ComponentHelper.spriteFrame(node,res);\r\n        },this),mname);\r\n    }\r\n\r\n    /**\r\n     * 资源按组加载\r\n     * @param resArr 资源集合\r\n     * @param handler 全部加载完成回调\r\n     */\r\n    loaderResByGroup(resArr:Array<GroupFileData>,handler:Handler)\r\n    {\r\n        if (!this.groupLoader) {\r\n            this.groupLoader = new GroupLoader();\r\n        }\r\n        this.groupLoader.addGroup(resArr,handler);\r\n    }\r\n\r\n\r\n    //通过loaderInfo加载资源 主要用于资源内存管理\r\n    /**\r\n     * 检查释放配置过对应的模块\r\n     * @param moduleName 模块名称\r\n     */\r\n    private checkModuleConfig(moduleName:string):moduleData\r\n    { \r\n        if (!!this.moudleConfigs[moduleName]) {\r\n            return this.moudleConfigs[moduleName];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 释放模块\r\n     * @param moduleName 模块名称\r\n     */\r\n    releaseByModule(moduleName:string){\r\n        let exsitResource = {};\r\n        //生成排除的资源集合\r\n        for (let key in this.moudleLoaders) {\r\n            if (!this.moudleLoaders[key].needRelease && key != moduleName) {\r\n                this.moudleLoaders[key].getAllResUID(exsitResource);\r\n            }\r\n        }\r\n        let needRelease = this.moudleLoaders[moduleName];\r\n        if (needRelease) {\r\n            needRelease.release(exsitResource);\r\n        }\r\n        // cc.log(this.moudleLoaders);\r\n    }\r\n\r\n    releaseAllModule()\r\n    {\r\n        for (let key in this.moudleLoaders) {\r\n            this.moudleLoaders[key].releaseItem();\r\n        }\r\n    }\r\n\r\n    //mname 模块名\r\n    isRelease(mname:string)\r\n    {\r\n        if (this.moudleLoaders.hasOwnProperty(mname)) {\r\n            return this.moudleLoaders[mname].needRelease;\r\n        }\r\n        return false;\r\n    }\r\n   \r\n}\r\nexport default LoaderManager.instance();"]}