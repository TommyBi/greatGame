{"version":3,"sources":["assets/src/framework/manager/LoaderManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Handler from \"../base/Handler\";\nimport GroupLoader from \"../loader/GroupLoader\";\nimport { GroupFileData } from \"../loader/GroupData\";\nimport Loader from \"../loader/Loader\";\nimport ComponentHelper from \"../tools/ComponentHelper\";\n\n/**\n * 资源加载模块数据\n */\nexport interface moduleData {\n    mname: string,//模块名称\n    url: string, //模块对应的路径\n    isRelease: boolean //释放可以释放\n}\n\nclass LoaderManager {\n    //模块配置数据,由外部传入\n    private moudleConfigs = <moduleData>{};\n    //loader 模块加载器\n    private moudleLoaders = <Loader>{};\n    private groupLoader: GroupLoader = null;\n\n    private static _instance: LoaderManager;\n\n    public static instance(): LoaderManager {\n        if (!this._instance) {\n            this._instance = new LoaderManager();\n        }\n        return this._instance;\n    }\n\n    /**\n     * \n     * @param fileName 文件名\n     * @param type 文件类型\n     * @param handler 回调函数\n     * @param mname 模块名\n     */\n    loadRes(fileName: string, type: any, handler: Handler, mname: string) {\n        let info: moduleData = this.checkModuleConfig(mname);\n        if (!!info) {\n            if (!this.moudleLoaders[mname]) {\n                this.moudleLoaders[mname] = new Loader(info.isRelease);\n            }\n            let url = info.url + '/' + fileName;\n            this.moudleLoaders[mname].addLoaderItem(url, type, handler);\n        } else {\n            cc.error('module no exist: ' + mname);\n        }\n    }\n\n    /**\n     * 设置模块数据 外部调用\n     * @param data 模块数据\n     */\n    setModuleConfig(data: moduleData) {\n        if (!!data) {\n            if (!this.moudleConfigs.hasOwnProperty(data.mname)) {\n                this.moudleConfigs[data.mname] = data;\n            }\n        } else {\n            cc.error('module config error');\n        }\n    }\n\n    /**\n     * 加载sprite\n     * @param fileName \n     * @param handler \n     * @param mname \n     */\n    loaderSpriteFrame(fileName: string, handler: Handler, mname: string) {\n        this.loadRes(fileName, cc.SpriteFrame, handler, mname);\n    }\n\n    /**\n     * 加载Prefab\n     * @param fileName \n     * @param handler \n     * @param mname \n     */\n    loaderPrefab(fileName: string, handler: Handler, mname: string) {\n        this.loadRes(fileName, cc.Prefab, handler, mname);\n    }\n\n    /**\n     * 加载json\n     * @param fileName \n     * @param handler \n     * @param mname \n     */\n    loaderJson(fileName: string, handler: Handler, mname: string) {\n        this.loadRes(fileName, cc.JsonAsset, handler, mname);\n    }\n\n    /**\n     * 加载spine\n     * @param fileName \n     * @param handler \n     * @param mname \n     */\n    loaderSpine(fileName: string, handler: Handler, mname: string) {\n        this.loadRes(fileName, sp.SkeletonData, handler, mname);\n    }\n\n    /**\n     * 加载动画\n     * @param fileName \n     * @param handler \n     * @param mname \n     */\n    loaderAniamteClip(fileName: string, handler: Handler, mname: string) {\n        this.loadRes(fileName, cc.AnimationClip, handler, mname)\n    }\n\n    /**\n     * 加载sprite并赋值\n     * @param node sprite节点\n     * @param fileName 文件名\n     * @param mname 模块名\n     */\n    load2Sprite(node: cc.Node, fileName: string, mname: string) {\n        this.loadRes(fileName, cc.SpriteFrame, Handler.create((res) => {\n            ComponentHelper.spriteFrame(node, res);\n        }, this), mname);\n    }\n\n    /**\n     * 资源按组加载\n     * @param resArr 资源集合\n     * @param handler 全部加载完成回调\n     */\n    loaderResByGroup(resArr: Array<GroupFileData>, handler: Handler) {\n        if (!this.groupLoader) {\n            this.groupLoader = new GroupLoader();\n        }\n        this.groupLoader.addGroup(resArr, handler);\n    }\n\n\n    //通过loaderInfo加载资源 主要用于资源内存管理\n    /**\n     * 检查释放配置过对应的模块\n     * @param moduleName 模块名称\n     */\n    private checkModuleConfig(moduleName: string): moduleData {\n        if (!!this.moudleConfigs[moduleName]) {\n            return this.moudleConfigs[moduleName];\n        }\n        return null;\n    }\n\n    /**\n     * 释放模块\n     * @param moduleName 模块名称\n     */\n    releaseByModule(moduleName: string) {\n        let exsitResource = {};\n        //生成排除的资源集合\n        for (let key in this.moudleLoaders) {\n            if (!this.moudleLoaders[key].needRelease && key != moduleName) {\n                this.moudleLoaders[key].getAllResUID(exsitResource);\n            }\n        }\n        let needRelease = this.moudleLoaders[moduleName];\n        if (needRelease) {\n            needRelease.release(exsitResource);\n        }\n        // cc.log(this.moudleLoaders);\n    }\n\n    releaseAllModule() {\n        for (let key in this.moudleLoaders) {\n            this.moudleLoaders[key].releaseItem();\n        }\n    }\n\n    //mname 模块名\n    isRelease(mname: string) {\n        if (this.moudleLoaders.hasOwnProperty(mname)) {\n            return this.moudleLoaders[mname].needRelease;\n        }\n        return false;\n    }\n\n}\nexport default LoaderManager.instance();"]}