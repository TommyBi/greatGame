{"version":3,"sources":["assets/src/framework/loader/LoaderItem.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Handler from \"../base/Handler\";\n\n//需要加载的资源\nexport default class LoaderItem\n{\n    resources = {};\n    isRelease = false;\n    url:string = null;\n    maxRetryTimes:number = 0;  //最大重试次数\n    isActive:boolean = true;    //默认可以使用\n    sameArr:Array<Handler> = null;\n    cresource:cc.Asset;\n\n    load(url,type,handler){\n        this.url = url;\n        cc.loader.loadRes(url,type,(err,res)=>{\n            if (err) {\n                handler && handler.call(null);\n                cc.error('资源加载失败--' + url);\n                return;\n            }\n            !!handler && handler.call(res,url);\n            if (!!this.sameArr) {\n                for (let i = 0; i < this.sameArr.length; i++) {\n                    this.sameArr[i] && this.sameArr[i].call(res,url);\n                }\n                this.sameArr.length = 0;\n            }\n            this._cacheRes(res);\n        }); \n    }\n\n    addSame(handler){\n        if (!this.sameArr) {\n            this.sameArr = [];\n        }\n        this.sameArr.push(handler);\n    }\n\n    //设置已存在的资源的key\n    setExsitRes(exsits){\n        for (let key in this.resources) {\n            exsits[key] = true;\n        }\n    }\n    \n        /**\n     * 缓存已使用资源\n     * @param resource 缓存单个资源的所有使用资源\n     */\n    _cacheRes(resource) {\n        let loader = cc.loader;\n        this.cresource = resource;//存储当前资源，用于后期释放\n        for (let key of loader.getDependsRecursively(resource)) {\n            // cc.log(key,this.resources[key]);\n            this.resources[key] = true;\n        }\n        \n    }\n\n    //释放完成后重置加载器\n    reset(){\n        this.isActive = true;\n        this.url = null;\n        for (let key in this.resources) {\n            delete this.resources[key];\n        }\n        this.cresource = null;\n        if (this.sameArr) {\n            this.sameArr.length = 0;\n        }\n    }\n\n    release(exsits){\n        for (let key in this.resources) {\n            if ( key in exsits) {\n                continue;\n            } else {\n                cc.loader.release(key);\n            }\n        }\n        if (!!this.cresource) {\n            cc.loader.release(this.cresource);\n        }\n        this.reset();\n    }\n\n}\n"]}