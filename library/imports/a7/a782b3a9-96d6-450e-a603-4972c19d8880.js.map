{"version":3,"sources":["assets/src/framework/loader/LoaderItem.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Handler from \"../base/Handler\";\r\n\r\n//需要加载的资源\r\nexport default class LoaderItem\r\n{\r\n    resources = {};\r\n    isRelease = false;\r\n    url:string = null;\r\n    maxRetryTimes:number = 0;  //最大重试次数\r\n    isActive:boolean = true;    //默认可以使用\r\n    sameArr:Array<Handler> = null;\r\n    cresource:cc.Asset;\r\n\r\n    load(url,type,handler){\r\n        this.url = url;\r\n        cc.loader.loadRes(url,type,(err,res)=>{\r\n            if (err) {\r\n                handler && handler.call(null);\r\n                cc.error('资源加载失败--' + url);\r\n                return;\r\n            }\r\n            !!handler && handler.call(res,url);\r\n            if (!!this.sameArr) {\r\n                for (let i = 0; i < this.sameArr.length; i++) {\r\n                    this.sameArr[i] && this.sameArr[i].call(res,url);\r\n                }\r\n                this.sameArr.length = 0;\r\n            }\r\n            this._cacheRes(res);\r\n        }); \r\n    }\r\n\r\n    addSame(handler){\r\n        if (!this.sameArr) {\r\n            this.sameArr = [];\r\n        }\r\n        this.sameArr.push(handler);\r\n    }\r\n\r\n    //设置已存在的资源的key\r\n    setExsitRes(exsits){\r\n        for (let key in this.resources) {\r\n            exsits[key] = true;\r\n        }\r\n    }\r\n    \r\n        /**\r\n     * 缓存已使用资源\r\n     * @param resource 缓存单个资源的所有使用资源\r\n     */\r\n    _cacheRes(resource) {\r\n        let loader = cc.loader;\r\n        this.cresource = resource;//存储当前资源，用于后期释放\r\n        for (let key of loader.getDependsRecursively(resource)) {\r\n            // cc.log(key,this.resources[key]);\r\n            this.resources[key] = true;\r\n        }\r\n        \r\n    }\r\n\r\n    //释放完成后重置加载器\r\n    reset(){\r\n        this.isActive = true;\r\n        this.url = null;\r\n        for (let key in this.resources) {\r\n            delete this.resources[key];\r\n        }\r\n        this.cresource = null;\r\n        if (this.sameArr) {\r\n            this.sameArr.length = 0;\r\n        }\r\n    }\r\n\r\n    release(exsits){\r\n        for (let key in this.resources) {\r\n            if ( key in exsits) {\r\n                continue;\r\n            } else {\r\n                cc.loader.release(key);\r\n            }\r\n        }\r\n        if (!!this.cresource) {\r\n            cc.loader.release(this.cresource);\r\n        }\r\n        this.reset();\r\n    }\r\n\r\n}\r\n"]}